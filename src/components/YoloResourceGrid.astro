---
// Resource Grid Component
interface Props {
  title?: string;
  subtitle?: string;
  columns?: '1' | '2' | '3' | '4';
  gap?: 'sm' | 'md' | 'lg';
  className?: string;
  showLoadMore?: boolean;
  loadMoreText?: string;
}

const { 
  title,
  subtitle,
  columns = '3',
  gap = 'md',
  className = '',
  showLoadMore = false,
  loadMoreText = 'Load More Resources'
} = Astro.props;

const gridClasses = {
  '1': 'grid-cols-1',
  '2': 'grid-cols-1 md:grid-cols-2',
  '3': 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3',
  '4': 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
};

const gapClasses = {
  sm: 'gap-4',
  md: 'gap-6',
  lg: 'gap-8'
};
---

<section class={`yolo-resource-grid ${className}`} data-testid="resource-grid">
  <!-- Grid Header -->
  {(title || subtitle) && (
    <div class="resource-grid-header text-center mb-12">
      {title && (
        <h2 class="text-3xl font-bold text-gray-900 mb-4 text-gradient">
          {title}
        </h2>
      )}
      {subtitle && (
        <p class="text-lg text-gray-600 max-w-2xl mx-auto">
          {subtitle}
        </p>
      )}
    </div>
  )}

  <!-- Resource Grid -->
  <div class={`resource-grid grid ${gridClasses[columns]} ${gapClasses[gap]} mb-8`} data-testid="resource-grid-container">
    <slot />
  </div>

  <!-- Load More Button -->
  {showLoadMore && (
    <div class="text-center">
      <button 
        class="load-more-btn btn-outline hover:btn-primary transition-all duration-300"
        data-testid="load-more-btn"
      >
        <span class="load-more-text">{loadMoreText}</span>
        <svg class="w-5 h-5 ml-2 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"/>
        </svg>
      </button>
    </div>
  )}
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const resourceGrids = document.querySelectorAll('.yolo-resource-grid');
    
    resourceGrids.forEach((grid) => {
      const loadMoreBtn = grid.querySelector('.load-more-btn') as HTMLButtonElement | null;
      
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', () => {
          // Add loading state
          const loadMoreText = loadMoreBtn.querySelector('.load-more-text') as HTMLElement | null;
          const originalText = loadMoreText ? loadMoreText.textContent : 'Load More';
          
          if (loadMoreText) {
            loadMoreText.textContent = 'Loading...';
          }
          loadMoreBtn.disabled = true;
          loadMoreBtn.classList.add('opacity-75', 'cursor-not-allowed');
          
          // Simulate loading (replace with actual API call)
          setTimeout(() => {
            if (loadMoreText && originalText) {
              loadMoreText.textContent = originalText;
            }
            loadMoreBtn.disabled = false;
            loadMoreBtn.classList.remove('opacity-75', 'cursor-not-allowed');
            
            // Dispatch custom event for handling load more
            grid.dispatchEvent(new CustomEvent('loadMore', {
              detail: { grid },
              bubbles: true
            }));
          }, 1000);
        });
      }
    });
  });
</script>

<style>
  .resource-grid-header {
    animation: fadeInUp 0.6s ease-out;
  }
  
  .resource-grid {
    animation: fadeInUp 0.6s ease-out 0.2s both;
  }
  
  .load-more-btn {
    animation: fadeInUp 0.6s ease-out 0.4s both;
  }
  
  .load-more-btn:hover svg {
    transform: translateY(2px);
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Stagger animation for grid items */
  .resource-grid > * {
    animation: fadeInUp 0.6s ease-out backwards;
  }
  
  .resource-grid > *:nth-child(1) { animation-delay: 0.1s; }
  .resource-grid > *:nth-child(2) { animation-delay: 0.2s; }
  .resource-grid > *:nth-child(3) { animation-delay: 0.3s; }
  .resource-grid > *:nth-child(4) { animation-delay: 0.4s; }
  .resource-grid > *:nth-child(5) { animation-delay: 0.5s; }
  .resource-grid > *:nth-child(6) { animation-delay: 0.6s; }
  .resource-grid > *:nth-child(7) { animation-delay: 0.7s; }
  .resource-grid > *:nth-child(8) { animation-delay: 0.8s; }
  .resource-grid > *:nth-child(9) { animation-delay: 0.9s; }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .resource-grid-header h2 {
      font-size: 2rem;
    }
    
    .resource-grid-header p {
      font-size: 1rem;
    }
  }
</style>