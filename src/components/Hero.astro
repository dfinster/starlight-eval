---
// Hero Section Component
interface Props {
  title: string;
  subtitle?: string;
  backgroundImage?: string;
  ctaButtons?: Array<{text: string, href: string, variant: 'primary' | 'secondary'}>;
  animation?: boolean;
}

const { 
  title, 
  subtitle, 
  backgroundImage, 
  ctaButtons = [], 
  animation = true 
} = Astro.props;
---

<section class="relative min-h-screen flex items-center justify-center overflow-hidden">
  <!-- Background Gradient -->
  <div class="absolute inset-0 bg-gradient-to-br from-yolo-blue/90 via-yolo-accent/85 to-yolo-light-blue/80"></div>
  
  <!-- Background Image (if provided) -->
  {backgroundImage && (
    <div class="absolute inset-0 z-0">
      <img 
        src={backgroundImage} 
        alt="" 
        class="w-full h-full object-cover opacity-20" 
      />
    </div>
  )}
  
  <!-- Background Pattern -->
  <div class="absolute inset-0 opacity-10">
    <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
      <defs>
        <pattern id="hero-pattern" x="0" y="0" width="10" height="10" patternUnits="userSpaceOnUse">
          <circle cx="5" cy="5" r="1" fill="currentColor" opacity="0.3"/>
        </pattern>
      </defs>
      <rect width="100" height="100" fill="url(#hero-pattern)" class="text-white"/>
    </svg>
  </div>
  
  <!-- Content Container -->
  <div class="relative z-10 container-custom text-center text-white">
    <div class={`max-w-4xl mx-auto ${animation ? 'animate-fade-in' : ''}`}>
      <!-- Main Title -->
      <h1 class="text-4xl md:text-6xl lg:text-7xl font-bold mb-6 leading-tight">
        <span class="bg-gradient-to-r from-white via-blue-100 to-white bg-clip-text text-transparent">
          {title}
        </span>
      </h1>
      
      <!-- Subtitle -->
      {subtitle && (
        <p class={`text-xl md:text-2xl lg:text-3xl text-blue-100 mb-8 font-light leading-relaxed ${animation ? 'animate-fade-in animate-stagger-1' : ''}`}>
          {subtitle}
        </p>
      )}
      
      <!-- CTA Buttons -->
      {ctaButtons.length > 0 && (
        <div class={`flex flex-col sm:flex-row gap-4 justify-center items-center mt-12 ${animation ? 'animate-fade-in animate-stagger-2' : ''}`}>
          {ctaButtons.map((button, index) => (
            <a 
              href={button.href}
              class={`inline-flex items-center justify-center px-8 py-4 rounded-lg font-semibold text-lg transition-all duration-200 ease-out transform hover:scale-105 hover:-translate-y-1 ${
                button.variant === 'primary' 
                  ? 'bg-white text-yolo-blue hover:bg-blue-50 shadow-lg hover:shadow-xl' 
                  : 'bg-transparent border-2 border-white text-white hover:bg-white hover:text-yolo-blue shadow-lg'
              }`}
            >
              {button.text}
            </a>
          ))}
        </div>
      )}
    </div>
    
    <!-- Scroll Indicator -->
    <div class={`absolute bottom-8 left-1/2 transform -translate-x-1/2 ${animation ? 'animate-bounce' : ''}`}>
      <div class="w-6 h-10 border-2 border-white/50 rounded-full flex justify-center">
        <div class="w-1 h-3 bg-white/70 rounded-full mt-2 animate-pulse"></div>
      </div>
      <p class="text-white/70 text-sm mt-2">Scroll Down</p>
    </div>
  </div>
  
  <!-- Floating Elements -->
  <div class="absolute inset-0 pointer-events-none overflow-hidden">
    <!-- Floating orbs -->
    <div class="absolute top-1/4 left-1/4 w-32 h-32 bg-white/10 rounded-full blur-xl animate-pulse"></div>
    <div class="absolute top-3/4 right-1/4 w-24 h-24 bg-blue-300/20 rounded-full blur-lg animate-pulse" style="animation-delay: 1s;"></div>
    <div class="absolute top-1/2 right-1/3 w-16 h-16 bg-white/15 rounded-full blur-md animate-pulse" style="animation-delay: 2s;"></div>
  </div>
</section>

<script>
  // Initialize hero animations
  document.addEventListener('DOMContentLoaded', () => {
    const heroSection = document.querySelector('section');
    if (heroSection) {
      // Add entrance animation
      setTimeout(() => {
        const animatedElements = heroSection.querySelectorAll('.animate-fade-in');
        animatedElements.forEach((el, index) => {
          setTimeout(() => {
            el.classList.add('animate-in');
          }, index * 200);
        });
      }, 300);
    }
  });
</script>