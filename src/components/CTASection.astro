---
// Call-to-Action Section Component
interface Props {
  title: string;
  subtitle?: string;
  primaryButton?: {text: string, href: string};
  secondaryButton?: {text: string, href: string};
  background?: 'gradient' | 'solid' | 'glass' | 'pattern';
  size?: 'default' | 'large' | 'compact';
  alignment?: 'left' | 'center' | 'right';
  className?: string;
}

const { 
  title, 
  subtitle, 
  primaryButton, 
  secondaryButton, 
  background = 'gradient',
  size = 'default',
  alignment = 'center',
  className = ''
} = Astro.props;

const backgroundClasses = {
  gradient: 'bg-gradient-to-br from-yolo-blue via-yolo-accent to-yolo-light-blue text-white relative overflow-hidden',
  solid: 'bg-yolo-accent text-white',
  glass: 'glass-effect-strong text-gray-900',
  pattern: 'bg-gray-900 text-white relative overflow-hidden'
};

const sizeClasses = {
  default: 'section-spacing',
  large: 'section-spacing-lg',
  compact: 'section-spacing-sm'
};

const alignmentClasses = {
  left: 'text-left',
  center: 'text-center',
  right: 'text-right'
};

const containerClasses = {
  left: 'max-w-4xl',
  center: 'max-w-4xl mx-auto',
  right: 'max-w-4xl ml-auto'
};
---

<section class={`${sizeClasses[size]} ${backgroundClasses[background]} ${className}`}>
  <!-- Background Elements -->
  {background === 'gradient' && (
    <div class="absolute inset-0 pointer-events-none">
      <!-- Animated gradient orbs -->
      <div class="absolute top-0 left-0 w-96 h-96 bg-white/10 rounded-full blur-3xl animate-pulse"></div>
      <div class="absolute bottom-0 right-0 w-80 h-80 bg-blue-300/20 rounded-full blur-2xl animate-pulse" style="animation-delay: 1s;"></div>
      
      <!-- Grid pattern -->
      <div class="absolute inset-0 opacity-10">
        <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
          <defs>
            <pattern id="cta-grid" x="0" y="0" width="10" height="10" patternUnits="userSpaceOnUse">
              <path d="M 10 0 L 0 0 0 10" fill="none" stroke="currentColor" stroke-width="0.5"/>
            </pattern>
          </defs>
          <rect width="100" height="100" fill="url(#cta-grid)" class="text-white"/>
        </svg>
      </div>
    </div>
  )}
  
  {background === 'pattern' && (
    <div class="absolute inset-0 pointer-events-none opacity-20">
      <svg class="w-full h-full" viewBox="0 0 60 60" preserveAspectRatio="none">
        <defs>
          <pattern id="cta-pattern" x="0" y="0" width="60" height="60" patternUnits="userSpaceOnUse">
            <circle cx="30" cy="30" r="20" fill="none" stroke="currentColor" stroke-width="1"/>
            <circle cx="30" cy="30" r="2" fill="currentColor"/>
            <circle cx="0" cy="0" r="2" fill="currentColor"/>
            <circle cx="60" cy="60" r="2" fill="currentColor"/>
          </pattern>
        </defs>
        <rect width="100" height="100" fill="url(#cta-pattern)" class="text-white"/>
      </svg>
    </div>
  )}
  
  <div class="container-custom relative z-10">
    <div class={`${containerClasses[alignment]} ${alignmentClasses[alignment]}`}>
      <!-- Title -->
      <h2 class={`text-3xl md:text-4xl lg:text-5xl font-bold mb-6 leading-tight animate-fade-in ${
        background === 'glass' ? 'text-gray-900' : 'text-white'
      }`}>
        {background === 'glass' ? (
          <span class="text-gradient">{title}</span>
        ) : (
          title
        )}
      </h2>
      
      <!-- Subtitle -->
      {subtitle && (
        <p class={`text-xl md:text-2xl mb-8 leading-relaxed animate-fade-in animate-stagger-1 ${
          background === 'glass' 
            ? 'text-gray-600' 
            : background === 'gradient' 
              ? 'text-blue-100' 
              : 'text-blue-200'
        }`}>
          {subtitle}
        </p>
      )}
      
      <!-- Action Buttons -->
      {(primaryButton || secondaryButton) && (
        <div class={`flex flex-col sm:flex-row gap-4 animate-fade-in animate-stagger-2 ${
          alignment === 'center' 
            ? 'justify-center' 
            : alignment === 'right' 
              ? 'justify-end' 
              : 'justify-start'
        }`}>
          {primaryButton && (
            <a 
              href={primaryButton.href}
              class={`inline-flex items-center justify-center px-8 py-4 rounded-lg font-semibold text-lg transition-all duration-200 ease-out transform hover:scale-105 hover:-translate-y-1 shadow-lg hover:shadow-xl ${
                background === 'glass'
                  ? 'bg-yolo-blue text-white hover:bg-yolo-blue/90'
                  : 'bg-white text-yolo-blue hover:bg-blue-50'
              }`}
            >
              {primaryButton.text}
            </a>
          )}
          
          {secondaryButton && (
            <a 
              href={secondaryButton.href}
              class={`inline-flex items-center justify-center px-8 py-4 rounded-lg font-semibold text-lg transition-all duration-200 ease-out transform hover:scale-105 hover:-translate-y-1 ${
                background === 'glass'
                  ? 'bg-transparent border-2 border-yolo-blue text-yolo-blue hover:bg-yolo-blue hover:text-white'
                  : 'bg-transparent border-2 border-white text-white hover:bg-white hover:text-yolo-blue'
              } shadow-lg hover:shadow-xl`}
            >
              {secondaryButton.text}
            </a>
          )}
        </div>
      )}
    </div>
  </div>
  
  <!-- Floating Action Elements -->
  {background === 'gradient' && (
    <div class="absolute inset-0 pointer-events-none overflow-hidden">
      <!-- Floating geometric shapes -->
      <div class="absolute top-1/4 right-10 w-4 h-4 bg-white/30 rotate-45 animate-pulse"></div>
      <div class="absolute bottom-1/3 left-10 w-6 h-6 border-2 border-white/40 rounded-full animate-pulse" style="animation-delay: 0.5s;"></div>
      <div class="absolute top-1/2 right-1/4 w-3 h-3 bg-blue-200/50 rotate-45 animate-pulse" style="animation-delay: 1s;"></div>
    </div>
  )}
</section>

<script>
  // Initialize CTA animations
  document.addEventListener('DOMContentLoaded', () => {
    if (typeof IntersectionObserver !== 'undefined') {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const animatedElements = entry.target.querySelectorAll('.animate-fade-in');
            animatedElements.forEach((el, index) => {
              setTimeout(() => {
                el.classList.add('animate-in');
              }, index * 200);
            });
            observer.unobserve(entry.target);
          }
        });
      }, {
        threshold: 0.3,
        rootMargin: '0px 0px -100px 0px'
      });
      
      const ctaSections = document.querySelectorAll('section');
      ctaSections.forEach(section => {
        observer.observe(section);
      });
    }
  });
</script>