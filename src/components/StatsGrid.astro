---
// Statistics Grid Component
interface Props {
  title?: string;
  subtitle?: string;
  background?: 'default' | 'gradient' | 'dark' | 'glass';
  columns?: '2' | '3' | '4' | 'auto';
  className?: string;
}

const { 
  title, 
  subtitle, 
  background = 'default',
  columns = '4',
  className = ''
} = Astro.props;

const backgroundClasses = {
  default: 'bg-gray-50',
  gradient: 'bg-gradient-to-br from-yolo-blue to-yolo-light-blue text-white',
  dark: 'bg-gray-900 text-white',
  glass: 'glass-effect'
};

const gridClasses = {
  '2': 'grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-12',
  '3': 'grid grid-cols-1 md:grid-cols-3 gap-8 lg:gap-12',
  '4': 'grid-stats',
  'auto': 'grid-auto-fit gap-8 lg:gap-12'
};

const textColor = background === 'gradient' || background === 'dark' ? 'white' : 'primary';
---

<section class={`section-spacing ${backgroundClasses[background]} ${className}`}>
  <div class="container-custom">
    <!-- Section Header -->
    {(title || subtitle) && (
      <div class="text-center mb-12 lg:mb-16">
        {title && (
          <h2 class={`text-3xl md:text-4xl lg:text-5xl font-bold mb-4 animate-fade-in ${
            background === 'gradient' || background === 'dark' 
              ? 'text-white' 
              : 'text-gray-900'
          }`}>
            {background === 'default' ? (
              <span class="text-gradient">{title}</span>
            ) : (
              title
            )}
          </h2>
        )}
        {subtitle && (
          <p class={`text-xl max-w-3xl mx-auto animate-fade-in animate-stagger-1 ${
            background === 'gradient' || background === 'dark' 
              ? 'text-blue-100' 
              : 'text-gray-600'
          }`}>
            {subtitle}
          </p>
        )}
      </div>
    )}
    
    <!-- Stats Grid -->
    <div class={`${gridClasses[columns]} animate-fade-in animate-stagger-2`} data-testid="grid-stats">
      <slot />
    </div>
  </div>
  
  <!-- Background Pattern for gradient variant -->
  {background === 'gradient' && (
    <div class="absolute inset-0 opacity-10 pointer-events-none">
      <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
        <defs>
          <pattern id="stats-pattern" x="0" y="0" width="20" height="20" patternUnits="userSpaceOnUse">
            <circle cx="10" cy="10" r="1" fill="currentColor" opacity="0.5"/>
            <circle cx="0" cy="0" r="1" fill="currentColor" opacity="0.3"/>
            <circle cx="20" cy="20" r="1" fill="currentColor" opacity="0.3"/>
          </pattern>
        </defs>
        <rect width="100" height="100" fill="url(#stats-pattern)" class="text-white"/>
      </svg>
    </div>
  )}
</section>

<script>
  // Initialize stats grid animations
  document.addEventListener('DOMContentLoaded', () => {
    if (typeof IntersectionObserver !== 'undefined') {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-in');
            
            // Stagger animation for stat items
            const stats = entry.target.querySelectorAll('[data-target]');
            stats.forEach((stat, index) => {
              const parent = stat.closest('div');
              if (parent) {
                setTimeout(() => {
                  parent.classList.add('animate-in');
                }, index * 200);
              }
            });
            
            observer.unobserve(entry.target);
          }
        });
      }, {
        threshold: 0.3,
        rootMargin: '0px 0px -100px 0px'
      });
      
      const statsGrids = document.querySelectorAll('[data-testid="grid-stats"]');
      statsGrids.forEach(grid => {
        observer.observe(grid);
      });
    }
  });
</script>